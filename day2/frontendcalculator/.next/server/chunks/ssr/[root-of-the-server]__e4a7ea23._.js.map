{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshshukla/day2/frontendcalculator/lib/config.ts"],"sourcesContent":["export  default  {\n    contractAddress: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n    abi :  [\n        {\n          \"type\": \"constructor\",\n          \"inputs\": [],\n          \"stateMutability\": \"nonpayable\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"addCandidate\",\n          \"inputs\": [\n            {\n              \"name\": \"_candidateName\",\n              \"type\": \"string\",\n              \"internalType\": \"string\"\n            }\n          ],\n          \"outputs\": [],\n          \"stateMutability\": \"nonpayable\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"candidatesName\",\n          \"inputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"string\",\n              \"internalType\": \"string\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"getCandidateNames\",\n          \"inputs\": [],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"string[]\",\n              \"internalType\": \"string[]\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"getNoOfCandidates\",\n          \"inputs\": [],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"getVotes\",\n          \"inputs\": [\n            {\n              \"name\": \"_candidateName\",\n              \"type\": \"string\",\n              \"internalType\": \"string\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"owner\",\n          \"inputs\": [],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"address\",\n              \"internalType\": \"address\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        },\n        {\n          \"type\": \"function\",\n          \"name\": \"vote\",\n          \"inputs\": [\n            {\n              \"name\": \"_candidateName\",\n              \"type\": \"string\",\n              \"internalType\": \"string\"\n            }\n          ],\n          \"outputs\": [],\n          \"stateMutability\": \"nonpayable\"\n        }\n      ]\n        \n    \n\n}"],"names":[],"mappings":";;;uCAAiB;IACb,iBAAiB;IACjB,KAAO;QACH;YACE,QAAQ;YACR,UAAU,EAAE;YACZ,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU;gBACR;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,WAAW,EAAE;YACb,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU;gBACR;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,WAAW;gBACT;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU,EAAE;YACZ,WAAW;gBACT;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU,EAAE;YACZ,WAAW;gBACT;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU;gBACR;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,WAAW;gBACT;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU,EAAE;YACZ,WAAW;gBACT;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,mBAAmB;QACrB;QACA;YACE,QAAQ;YACR,QAAQ;YACR,UAAU;gBACR;oBACE,QAAQ;oBACR,QAAQ;oBACR,gBAAgB;gBAClB;aACD;YACD,WAAW,EAAE;YACb,mBAAmB;QACrB;KACD;AAIP","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshshukla/day2/frontendcalculator/contexts/PollContext.tsx"],"sourcesContent":["\"use client\";\nimport React, {\n  createContext,\n  useContext,\n  ReactNode,\n  useState,\n  useEffect,\n} from \"react\";\nimport config from \"../lib/config\";\nimport { useReadContract, useAccount } from \"wagmi\";\nimport { createPublicClient, http } from \"viem\";\nimport { hardhat } from \"viem/chains\";\nimport { UseReadContractReturnType } from \"wagmi\";\n\n// Create Viem client\nconst client = createPublicClient({\n  chain: hardhat,\n  transport: http(),\n});\n\ninterface PollContextType {\n  userAddress: `0x${string}` | undefined;\n  isConnected: boolean;\n  totalCandidates: number | null;\n  getNoOfCandidates: UseReadContractReturnType;\n  candidatesName: UseReadContractReturnType<string[]>;\n  owner: UseReadContractReturnType;\n  isLoading: boolean;\n  votes: Record<string, bigint>;\n  refreshVotes: () => void;\n}\n\nconst PollContext = createContext<PollContextType | undefined>(undefined);\n\nexport function PollProvider({ children }: { children: ReactNode }) {\n  const { address, isConnected } = useAccount();\n  const [userAddress, setUserAddress] = useState<`0x${string}` | undefined>();\n  const [totalCandidates, setTotalCandidates] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [votes, setVotes] = useState<Record<string, bigint>>({});\n\n  const getNoOfCandidates = useReadContract({\n    address: config.contractAddress as `0x${string}`,\n    abi: config.abi,\n    functionName: \"getNoOfCandidates\",\n    chainId: 31337,\n  });\n\n  const candidatesName = useReadContract({\n    address: config.contractAddress as `0x${string}`,\n    abi: config.abi,\n    functionName: \"getCandidateNames\",\n    chainId: 31337,\n  });\n\n  const owner = useReadContract({\n    address: config.contractAddress as `0x${string}`,\n    abi: config.abi,\n    functionName: \"owner\",\n    chainId: 31337,\n  });\n\n  // Wallet state sync\n  useEffect(() => {\n    if (isConnected) {\n      setUserAddress(address);\n    } else {\n      setUserAddress(undefined);\n    }\n  }, [address, isConnected]);\n\n  // Convert getNoOfCandidates bigint to number\n  useEffect(() => {\n    setIsLoading(true);\n    if (getNoOfCandidates.data !== undefined) {\n      const raw = getNoOfCandidates.data;\n      setTotalCandidates(Number(raw));\n    }\n    setIsLoading(false);\n  }, [getNoOfCandidates.data]);\n\n  // âœ… Real-time vote count fetcher\n\n  const candidatesList = Array.isArray(candidatesName?.data) ? candidatesName.data : [];\n  const refreshVotes = async () => {\n    if (!candidatesName?.data || candidatesList.length === 0) return;\n\n    const newVotes: Record<string, bigint> = {};\n\n    await Promise.all(\n      candidatesList.map(async (name) => {\n        try {\n          const voteCount = await client.readContract({\n            address: config.contractAddress as `0x${string}`,\n            abi: config.abi,\n            functionName: \"getVotes\",\n            args: [name],\n          });\n          newVotes[name] = voteCount as bigint;\n        } catch (err) {\n          console.error(`Error reading votes for ${name}`, err);\n        }\n      })\n    );\n\n    setVotes(newVotes);\n  };\n\n  // Auto-refresh when candidate names change\n  useEffect(() => {\n    refreshVotes();\n  }, [candidatesName.data]);\n\n  return (\n    <PollContext.Provider\n      value={{\n        userAddress,\n        isConnected,\n        totalCandidates,\n        isLoading,\n        getNoOfCandidates,\n        candidatesName,\n        owner,\n        votes,\n        refreshVotes,\n      }}\n    >\n      {children}\n    </PollContext.Provider>\n  );\n}\n\nexport function usePoll() {\n  const context = useContext(PollContext);\n  if (context === undefined) {\n    throw new Error(\"usePoll must be used within PollProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshshukla/day2/frontendcalculator/wagmi.ts"],"sourcesContent":["import { getDefaultConfig } from \"@rainbow-me/rainbowkit\";\nimport { arbitrum, base, mainnet, optimism, polygon, sepolia, anvil } from \"wagmi/chains\";\n\nexport const config = getDefaultConfig({\n  appName: \"RainbowKit Demo\",\n  projectId: \"YOUR_PROJECT_ID\", // Keep or remove if unnecessary\n  chains: [\n    mainnet,\n    polygon,\n    optimism,\n    arbitrum,\n    base,\n    anvil, // âœ… Add localhost for Hardhat\n    ...(process.env.NEXT_PUBLIC_ENABLE_TESTNETS === \"true\" ? [sepolia] : []),\n  ],\n  ssr: true,\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAEO,MAAM,SAAS,CAAA,GAAA,8KAAA,CAAA,mBAAgB,AAAD,EAAE;IACrC,SAAS;IACT,WAAW;IACX,QAAQ;QACN,gKAAA,CAAA,UAAO;QACP,gKAAA,CAAA,UAAO;QACP,iKAAA,CAAA,WAAQ;QACR,iKAAA,CAAA,WAAQ;QACR,6JAAA,CAAA,OAAI;QACJ,8JAAA,CAAA,QAAK;WACD,QAAQ,GAAG,CAAC,2BAA2B,KAAK,SAAS;YAAC,gKAAA,CAAA,UAAO;SAAC,GAAG,EAAE;KACxE;IACD,KAAK;AACP","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshshukla/day2/frontendcalculator/app/provider.tsx"],"sourcesContent":["\"use client\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nimport type React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { WagmiProvider } from \"wagmi\";\nimport { lightTheme, RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { PollProvider } from \"@/contexts/PollContext\";\n\nimport { config } from \"../wagmi\";\n\nconst queryClient = new QueryClient();\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider\n          theme={lightTheme({\n            accentColor: \"#000000\",\n            accentColorForeground: \"white\",\n            borderRadius: \"large\",\n            fontStack: \"system\",\n            overlayBlur: \"large\",\n          })}\n        >\n          <PollProvider>\n            {children}\n            </PollProvider>\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AATA;;;;;;;;AAWA,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW;AAE5B,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBACE,8OAAC,+IAAA,CAAA,gBAAa;QAAC,QAAQ,qGAAA,CAAA,SAAM;kBAC3B,cAAA,8OAAC,sLAAA,CAAA,sBAAmB;YAAC,QAAQ;sBAC3B,cAAA,8OAAC,8KAAA,CAAA,qBAAkB;gBACjB,OAAO,CAAA,GAAA,0KAAA,CAAA,aAAU,AAAD,EAAE;oBAChB,aAAa;oBACb,uBAAuB;oBACvB,cAAc;oBACd,WAAW;oBACX,aAAa;gBACf;0BAEA,cAAA,8OAAC,wHAAA,CAAA,eAAY;8BACV;;;;;;;;;;;;;;;;;;;;;AAMb","debugId":null}}]
}